"""
–ê–≥–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ Gemini: Gemini 2.5 Flash –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–æ–º —Å –ø–æ–º–æ—â—å—é browser_use.
"""

import os
import asyncio
import argparse
import logging  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞
from browser_use.llm import ChatGoogle
from browser_use import (
    Agent,
    BrowserSession,
)

# # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ ---
# # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞
# logging.basicConfig(
#     level=logging.INFO, format="%(asctime)s - %(levelname)s - [%(name)s] %(message)s"
# )
# logger = logging.getLogger("GeminiBrowserAgent")
# # # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ —à—É–º–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
# # logging.getLogger("browser_use").setLevel(logging.WARNING)
# # logging.getLogger("playwright").setLevel(logging.WARNING)
# # --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ ---


# ANSI —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
class Colors:
    BLUE = "\033[94m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    PURPLE = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    GRAY = "\033[90m"
    BOLD = "\033[1m"
    RESET = "\033[0m"


async def setup_browser(headless: bool = False):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    browser = BrowserSession(
        headless=headless,
        wait_for_network_idle_page_load_time=3.0,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        highlight_elements=True,  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        # save_recording_path="./recordings", # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        viewport_expansion=500,  # –í–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –Ω–µ–º–Ω–æ–≥–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    )
    return browser


RECOVERY_PROMPT = """
–í–ê–ñ–ù–û–ï –ü–†–ê–í–ò–õ–û: –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 —Ä–∞–∑–∞) –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º—ã–π –≤–∞–º–∏ —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫,
–ù–ï –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ø—Ä–æ—Å—Ç–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. 
–í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ `go_back` –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ü–µ–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º. 
–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ Google.
"""

SUMMARIZER_PROMPT = """–í—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ò–ò, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∏ –æ–±–æ–±—â–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π, –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–≥–µ–Ω—Ç–æ–º —à–∞–≥–æ–≤.

–í–∞—à–µ —Ä–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–ª–∏ –∫ –∫–æ–Ω–µ—á–Ω–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.

# –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –°–≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —à–∞–≥–∏ –≤–º–µ—Å—Ç–µ. –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–æ–º—É —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:

**–®–∞–≥–∏ [–æ—Ç - –¥–æ]:**
- **–ù–∞–±–ª—é–¥–µ–Ω–∏–µ:** –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∞–≥–µ–Ω—Ç –≤–∏–¥–µ–ª, —Å–ª—ã—à–∞–ª –∏–ª–∏ –æ—Å–æ–∑–Ω–∞–ª –Ω–∞ —ç—Ç–∏—Ö —à–∞–≥–∞—Ö.
- **–î–µ–π—Å—Ç–≤–∏–µ:** –û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–¥–µ–π—Å—Ç–≤–∏—è), –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∞–≥–µ–Ω—Ç–æ–º.
- **–†–µ—à–µ–Ω–∏–µ/–†–µ–∑—É–ª—å—Ç–∞—Ç:** –û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ, –ø—Ä–∏–Ω—è—Ç–æ–µ –∞–≥–µ–Ω—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –∏–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.

# –ö–æ–Ω—Ç–µ–∫—Å—Ç

{history}"""


async def agent_loop(llm, browser_session, query, initial_url=None):
    """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≥–µ–Ω—Ç–∞ —Å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –Ω–∞—á–∞–ª—å–Ω—ã–º URL-–∞–¥—Ä–µ—Å–æ–º."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL-–∞–¥—Ä–µ—Å
    initial_actions = None
    if initial_url:
        initial_actions = [
            {"open_tab": {"url": initial_url}},
        ]

    agent = Agent(
        task=query,
        message_context="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –§–∏–ª–∏–ø–ø, –∏ –æ–Ω –∂–∏–≤–µ—Ç –≤ –ù—é—Ä–Ω–±–µ—Ä–≥–µ. –°–µ–≥–æ–¥–Ω—è 24.07.2025.",
        llm=llm,
        browser_session=browser_session,
        use_vision=True,
        generate_gif=True,
        initial_actions=initial_actions,
        extend_system_message=RECOVERY_PROMPT,
        max_failures=3,
    )
    # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –∏ –±—Ä–∞—É–∑–µ—Ä–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∞ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞
    result_history = await agent.run()

    with open("history.md", "w") as f:
        history = "–≠—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤, –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—ã—Ö –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
        for h in result_history.history:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º –∏ –Ω–æ–º–µ—Ä—É —à–∞–≥–∞
            metadata = getattr(h, "metadata", None)
            step_number = getattr(metadata, "step_number", "–ù/–î")

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤—ã–≤–æ–¥—É –º–æ–¥–µ–ª–∏ –∏ —Ö–æ–¥—É –º—ã—Å–ª–µ–π
            model_output = getattr(h, "model_output", None)
            thinking = (
                getattr(model_output, "thinking", "–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.")
                or "–ü—Ä–æ—Ü–µ—Å—Å –º—ã—à–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω."
            )
            memory = (
                getattr(model_output, "memory", "–ü–∞–º—è—Ç—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞.")
                or "–ü–∞–º—è—Ç—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞."
            )
            evaluation = (
                getattr(
                    model_output,
                    "evaluation_previous_goal",
                    "–û—Ü–µ–Ω–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞.",
                )
                or "–û—Ü–µ–Ω–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞."
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            result_list = getattr(h, "result", [])
            content_parts = []
            if result_list:
                for res in result_list:
                    extracted = getattr(res, "extracted_content", None)
                    if extracted:
                        content_parts.append(extracted)

            content = (
                "\n".join(content_parts) if content_parts else "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ."
            )

            history += f"""
# –®–∞–≥: {step_number}
## –ú—ã—à–ª–µ–Ω–∏–µ
{thinking}
## –û—Ü–µ–Ω–∫–∞
{evaluation}
## –ü–∞–º—è—Ç—å
{memory}
## –†–µ–∑—É–ª—å—Ç–∞—Ç
{content}

"""

        f.write(history)

        with open("summary.md", "w") as f:

            response = await llm.get_client().aio.models.generate_content(
                model=llm.model, contents=SUMMARIZER_PROMPT.format(history=history)
            )
            f.write(response.text)

    return result_history.final_result() if result_history else "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"


async def main():
    # –û—Ç–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
    os.environ["ANONYMIZED_TELEMETRY"] = "false"

    # --- –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ---
    parser = argparse.ArgumentParser(
        description="–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ Gemini —Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –±—Ä–∞—É–∑–µ—Ä–æ–º."
    )
    parser.add_argument(
        "--model",
        type=str,
        default="gemini-2.5-flash",
        help="–ú–æ–¥–µ–ª—å Gemini –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.",
    )
    parser.add_argument(
        "--headless",
        default=False,
        # action="store_true",
        # help="–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –±–µ–∑–≥–æ–ª–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.",
    )
    args = parser.parse_args()

    gemini_api_key = os.getenv("GEMINI_API_KEY")
    if not gemini_api_key:
        print("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    llm = ChatGoogle(
        model=args.model,
        api_key=gemini_api_key,
        config={"automatic_function_calling": {"maximum_remote_calls": 100}},
    )
    browser = await setup_browser(headless=args.headless)

    print(f"{Colors.BOLD}{Colors.PURPLE}ü§ñ –ê–≥–µ–Ω—Ç –±—Ä–∞—É–∑–µ—Ä–∞ Gemini –≥–æ—Ç–æ–≤{Colors.RESET}")
    print(f"{Colors.GRAY}–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞{Colors.RESET}\n")

    while True:
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
            user_input = input(f"{Colors.BOLD}{Colors.BLUE}–í—ã: {Colors.RESET} ")
            if user_input.lower() in ["quit", "exit", "q"]:
                print(f"\n{Colors.GRAY}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.RESET}")
                break

            print(
                f"{Colors.BOLD}{Colors.GREEN}Gemini: {Colors.RESET}",
                end="",
                flush=True,
            )
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞
            result = await agent_loop(llm, browser, user_input)

            # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"{Colors.GREEN}{result}{Colors.RESET}\n")

        except KeyboardInterrupt:
            print("\n–í—ã—Ö–æ–¥...")
            break
        except Exception as e:
            print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    try:
        await browser.close()
        print("–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")


if __name__ == "__main__":
    # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
