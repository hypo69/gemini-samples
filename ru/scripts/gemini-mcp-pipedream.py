# pip install google-genai fastmcp
# —Ç—Ä–µ–±—É–µ—Ç Python 3.13+
import os
import asyncio
import logging
from datetime import datetime
from google import genai
from uuid import uuid4
from fastmcp import Client

# –ü–æ–¥–∞–≤–∏—Ç—å –≤—Å–µ –∂—É—Ä–Ω–∞–ª—ã
logging.getLogger().setLevel(logging.CRITICAL)
logging.getLogger("google").setLevel(logging.CRITICAL)
logging.getLogger("mcp").setLevel(logging.CRITICAL)
logging.getLogger("fastmcp").setLevel(logging.CRITICAL)
logging.getLogger("httpx").setLevel(logging.CRITICAL)
logging.getLogger("httpcore").setLevel(logging.CRITICAL)


# ANSI —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
class Colors:
    BLUE = "\033[94m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"
    RED = "\033[91m"
    PURPLE = "\033[95m"
    CYAN = "\033[96m"
    WHITE = "\033[97m"
    GRAY = "\033[90m"
    BOLD = "\033[1m"
    RESET = "\033[0m"


# –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Gemini –∫–ª–∞—Å—Å–∞ LLM
client = genai.Client()

mcp_client = Client(
    {
        "mcpServers": {
            "pipedream": {
                "transport": "http",
                "url": "https://remote.mcp.pipedream.net",
                "headers": {
                    # –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ Pipedream, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π, –Ω–µ–¥–æ–ª–≥–æ–≤–µ—á–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                    # —ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –≤–∞—Å —ç—Ñ–µ–º–µ—Ä–Ω—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è.
                    # –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Pipedream –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: https://pipedream.com/docs/connect/mcp/developers
                    "Authorization": f"Bearer {os.environ.get('PIPEDREAM_API_KEY',f'devtok_{uuid4()}')}",
                    # —Å–º–æ—Ç—Ä–∏—Ç–µ –∑–¥–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: https://pipedream.com/docs/connect/mcp/app-discovery
                    "x-pd-app-slug": "gmail, google_calendar",
                },
            }
        }
    }
)


async def run():
    async with mcp_client:
        config = genai.types.GenerateContentConfig(
            temperature=0,
            tools=[mcp_client.session],
            system_instruction=f"""–û—á–µ–Ω—å –≤–∞–∂–Ω–æ: —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî {datetime.now().strftime("%Z")}. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ ‚Äî {datetime.now().strftime("%Y-%m-%d")}. 
–õ—é–±—ã–µ –¥–∞—Ç—ã –¥–æ —ç—Ç–æ–π ‚Äî –≤ –ø—Ä–æ—à–ª–æ–º, –∞ –ª—é–±—ã–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ —ç—Ç–æ–π ‚Äî –≤ –±—É–¥—É—â–µ–º. –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏/–∫–æ–º–ø–∞–Ω–∏—è–º–∏/–ª—é–¥—å–º–∏, –∏ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–µ¬ª, ¬´—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ¬ª, ¬´—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ¬ª –∏ —Ç. –¥., –Ω–µ –¥—É–º–∞–π—Ç–µ, —á—Ç–æ –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã; 
–í—ã –º–æ–∂–µ—Ç–µ –∏ –¥–æ–ª–∂–Ω—ã –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∞—Å –ø—Ä–æ—Å–∏—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.""",
        )

        print(f"{Colors.BOLD}{Colors.PURPLE}ü§ñ –ê–≥–µ–Ω—Ç Gemini MCP –≥–æ—Ç–æ–≤{Colors.RESET}")
        print(f"{Colors.GRAY}–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞{Colors.RESET}\n")

        chat = client.aio.chats.create(model="gemini-2.5-flash", config=config)

        while True:
            user_input = input(f"{Colors.BOLD}{Colors.BLUE}–í—ã: {Colors.RESET}")
            if user_input.lower() == "exit":
                print(f"\n{Colors.GRAY}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.RESET}")
                break

            response = await chat.send_message_stream(user_input)
            print(
                f"{Colors.BOLD}{Colors.GREEN}Gemini: {Colors.RESET}",
                end="",
                flush=True,
            )

            async for chunk in response:
                print(f"{Colors.GREEN}{chunk.text}{Colors.RESET}", end="", flush=True)
            print("\n")


if __name__ == "__main__":
    asyncio.run(run())
