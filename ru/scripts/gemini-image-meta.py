import os
import re
from google import genai

client = genai.Client()


def generate_json_from_idea(idea: str) -> str:
    """Создает подробную подсказку в формате JSON из простой идеи с помощью модели Gemini."""

    # Шаблон подсказки включает желаемую структуру схемы JSON.
    schema_template = '''Преобразуйте прикрепленную идею пользователя в подробный объект JSON для создания изображения. Вывод должен быть только необработанным объектом JSON, без какого-либо форматирования markdown, такого как ```json ... ```.

Идея: "{idea}"

Схема:
{{
    "meta": {{
        "styleName": "...", // Уникальное, описательное имя для этого конкретного стиля изображения или пресета (например, "Магия эфирного леса", "Аллея в стиле киберпанк-нуар").
        "aspectRatio": "...", // Пропорциональное соотношение между шириной и высотой изображения (например, "16:9", "1:1", "4:5", "21:9").
        "promptPrefix": "..." // Необязательный текст для добавления в начало сгенерированной подсказки, например, имя файла, номер версии или определенное триггерное слово.
    }},
    "camera": {{
        "model": "...", // Описывает камеру, объектив или художественный носитель, используемый (например, "DSLR", "iPhone 15 Pro", "камера большого формата 8x10", "акварель на бумаге холодного прессования", "3D-рендер в Blender").
        "focalLength": "...", // Фокусное расстояние объектива, которое влияет на поле зрения и искажение перспективы (например, "широкоугольный 16 мм", "портретный 85 мм", "телеобъектив 200 мм", "изометрическая перспектива").
        "angle": "...", // Угол камеры относительно основного объекта или сцены (например, "на уровне глаз", "высокий угол", "голландский угол", "кадр с дрона", "вид с точки зрения червя").
        "type": "..." // Жанр или тип фотографии или художественного стиля (например, "макросъемка", "пейзаж", "фэнтезийная иллюстрация", "архитектурная визуализация", "абстрактное искусство").
    }},
    "subject": {{
        "primary": "...", // Основной фокус или объект изображения (например, "величественный горный хребет", "одинокий волк", "древний волшебник", "футуристический городской пейзаж", "абстрактная форма").
        "emotion": "...", // Доминирующая эмоция или настроение, передаваемое объектом или всей сценой (например, "безмятежное и мирное", "радостное", "меланхоличное", "угрожающее", "внушающее трепет").
        "pose": "...", // Поза, действие или расположение объекта (ов) (например, "бег к камере", "сидение в тихом созерцании", "извилистая река", "хаотичный взрыв").
        "gaze": "..." // Направление взгляда объекта или направленный фокус композиции (например, "смотрит за кадр", "ломает четвертую стену", "отвернулся от зрителя", "указывает на горизонт").
    }},
    "character": {{
        "appearance": "...", // Подробное физическое описание персонажа или ключевого объекта (например, "обветренное лицо с длинной белой бородой", "гладкий, хромированный робот", "древнее дерево, покрытое мхом").
        "wardrobe": "...", // Одежда, доспехи или любая форма покрытия на объекте (например, "богато украшенные золотые доспехи", "рваные лохмотья", "яркое кимоно", "глянцевая краска автомобиля").
        "accessories": "..." // Дополнительные предметы, которые носит или с которыми ассоциируется объект (например, "магический амулет", "кибернетические имплантаты", "пара очков", "меч и щит").
    }},
    "composition": {{
        "theory": "...", // Применяемые композиционные правила или теории (например, "правило третей", "золотое сечение", "ведущие линии", "симметричный баланс", "негативное пространство").
        "visualHierarchy": "..." // Описывает порядок, в котором взгляд зрителя привлекается к различным элементам сцены, от наиболее до наименее заметных.
    }},
    "setting": {{
        "environment": "...", // Общая среда или местоположение сцены (например, "мистический лес", "шумный киберпанк-город", "спокойный пляж на закате", "минималистичная белая комната", "поверхность Марса").
        "architecture": "...", // Описывает любые здания, руины или значительные природные сооружения (например, "готические соборы", "бруталистская архитектура", "инопланетные монолиты", "возвышающиеся скальные образования").
        "furniture": "..." // Ключевые объекты, реквизит или мебель в обстановке, которые добавляют контекст или детали (например, "один трон", "разбросанные футуристические обломки", "деревенский деревянный забор").
    }},
    "lighting": {{
        "source": "...", // Основной источник света в сцене (например, "драматический лунный свет", "мягкий свет из окна", "мерцающий свет свечи", "неоновые вывески", "магическое свечение").
        "direction": "...", // Направление, с которого исходит свет (например, "контровой свет", "контурный свет", "свет сверху вниз", "свет снизу").
        "quality": "..." // Качество и характеристики света и теней (например, "мягкий и рассеянный", "жесткий и высококонтрастный", "пятнистый", "объемные лучи света", "каустические отражения").
    }},
    "style": {{
        "artDirection": "...", // Всеобъемлющий художественный стиль, движение или влияние (например, "импрессионизм", "ар-деко", "киберпанк", "вейпорвейв", "в духе Гибли", "кинематографический").
        "mood": "..." // Общее настроение, ощущение или атмосфера изображения (например, "эфирное и сказочное", "дистопическое и суровое", "причудливое и веселое", "эпическое и драматическое").
    }},
    "rendering": {{
        "engine": "...", // Движок рендеринга, техника или носитель, используемый для создания окончательного изображения (например, "Octane Render", "масляная живопись", "штриховка", "пиксель-арт", "Unreal Engine 5").
        "fidelitySpec": "...", // Конкретные детали о текстуре и четкости изображения (например, "сильная зернистость пленки", "четкий цифровой фокус", "видимые мазки кисти", "хроматическая аберрация", "блик объектива").
        "postProcessing": "..." // Любые эффекты постобработки или финишной обработки (например, "цветокоррекция в бирюзовых и оранжевых тонах", "виньетка", "свечение и блики", "фильтр винтажной фотографии").
    }},
    "colorPalette": {{
        "primaryColors": [ // Наиболее доминирующие цвета, которые определяют общую цветовую схему изображения.
            {{ "name": "...", "hex": "...", "percentage": "..." }},
            {{ "name": "...", "hex": "...", "percentage": "..." }}
        ],
        "accentColors": [ // Дополнительные или контрастные цвета, используемые для акцента, детализации или выделения.
            {{ "name": "...", "hex": "...", "percentage": "..." }},
            {{ "name": "...", "hex": "...", "percentage": "..." }}
        ]
    }}
}}
'''
    prompt = schema_template.format(idea=idea)

    response = client.models.generate_content(
        model="gemini-2.5-pro",
        contents=prompt,
    )

    return response.text


def generate_images(
    idea: str,
    prompt: str,
    aspectRatio: str = "1:1",  # "1:1", "3:4", "4:3", "9:16", и "16:9".
    output_dir: str = "images",
    num_images: int = 1,
):
    """Создает изображения с помощью Imagen и сохраняет их в выходной каталог."""
    print(f"Создание {num_images} изображений для {idea}")

    try:
        response = client.models.generate_images(
            model="imagen-4.0-generate-preview-06-06",
            prompt=prompt,
            config=genai.types.GenerateImagesConfig(
                number_of_images=num_images,
                aspect_ratio=aspectRatio,
            ),
        )

        for i, generated_image in enumerate(response.generated_images):
            clean_idea = (
                re.sub(r"[^a-zA-Z0-9\s]", "", idea[:30]).lower().replace(" ", "-")
            )
            image_path = os.path.join(output_dir, f"{clean_idea}-{i+1}.png")
            generated_image.image.save(image_path)
            with open(os.path.join(output_dir, f"{clean_idea}.json"), "w") as f:
                f.write(prompt)
            print(f"Сохранено изображение и подсказка в {image_path}")

    except Exception as e:
        print(f"Во время создания изображения произошла ошибка: {e}")


def generate(
    idea: str,
    output_dir: str = "images",
    aspectRatio: str = "1:1",
    num_images: int = 2,
):
    """Организует процесс создания JSON, а затем создания изображений."""
    os.makedirs(output_dir, exist_ok=True)

    prompt_data = generate_json_from_idea(idea)

    generate_images(
        idea=idea,
        prompt=prompt_data,
        aspectRatio="3:4",
        output_dir=output_dir,
        num_images=num_images,
    )


if __name__ == "__main__":
    ideas = [
        "Энергетический напиток с каплями воды на нем, ультрареалистичный, для рекламы.",
        "Граффити с текстом 'JSON Schema' на кирпичной стене.",
        "Рыцарь LEGO, сражающийся с огромным, огнедышащим драконом на стене замка.",
        "Стильная женщина пьет кофе в парижском кафе, на заднем плане Эйфелева башня. Снято в золотой час.",
        "Эмоциональный, крупный план портрета старого рыбака.",
        "Огромный, инопланетный пейзаж на далекой планете с двумя солнцами, странными, высокими скальными образованиями и биолюминесцентными растениями. Эпическое научно-фантастическое концепт-арт.",
        "Причудливая иллюстрация дружелюбного лиса, читающего книгу в уютной, загроможденной библиотеке. Текст 'Полуночный чтец' должен быть незаметно интегрирован на корешок книги.",
        "Волшебный мужчина с блестящими розовыми волосами и большими глазами из аниме.",
        "Мультяшный робот, радостно машущий рукой, с простым, жирным контуром и яркими, плоскими цветами. ",
        "Полноростовой лист персонажа реалистичного капитана пиратов, показывающий вид спереди, сзади и сбоку.",
    ]

    for idea in ideas:
        generate(idea=idea)
